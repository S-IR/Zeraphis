import { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { useEffect, useRef, useState } from "react";
import { config, useSpring, animated, useTransition } from "react-spring";
import { z } from "zod";
import { SignUp, Login } from "~/components/authenticate";

const formSchema = z.enum(["sign-up", "login"]);
type AuthFormOption = z.infer<typeof formSchema>;

const AuthenticatePage: NextPage = () => {
  const router = useRouter();
  const urlParamForm = router.query.form as undefined | string;
  const [height, setHeight] = useState(0);
  const sectionRef = useRef<HTMLDivElement | null>(null);
  const absoluteElementRef = useRef<null | HTMLDivElement>(null);

  const [form, setForm] = useState<AuthFormOption>(
    urlParamForm !== undefined && formSchema.safeParse(urlParamForm).success
      ? (urlParamForm as AuthFormOption)
      : "login"
  );

  const loginStyle = useSpring({
    backgroundColor: form === "login" ? "#112E1F" : "transparent",
    config: config.gentle,
  });

  const signUpStyle = useSpring({
    backgroundColor: form === "sign-up" ? "#112E1F" : "transparent",
    config: config.gentle,
  });

  const transitions = useTransition(form, {
    from: { opacity: 0 },
    enter: { opacity: 1 },
    leave: { opacity: 1 },
  });

  const sectionStyles = useSpring({
    from: { height: "50vh" },
    to: { height: height > 0 ? Math.max(height, 75) + "vh" : "50vh" },
    config: config.stiff,
  });

  useEffect(() => {
    if (formSchema.safeParse(form).success) setForm(form as AuthFormOption);
  }, []);

  useEffect(() => {
    if (form !== router.query.form) {
      const currentUrl = new URL(
        router.asPath,
        `http://${window.location.host}${router.basePath}`
      );
      const params = new URLSearchParams(currentUrl.search);
      if (params.has("form")) {
        params.set("form", form); // update the form query param if it exists
      } else {
        params.append("form", form); // add the form query param if it doesn't exist
      }

      const newPath = `${currentUrl.pathname}?${params.toString()}`;
      router.push(newPath, undefined, { shallow: true });
    }
  }, [form]);

  useEffect(() => {
    if (!absoluteElementRef.current) return;

    const resizeObserver = new ResizeObserver((entries) => {
      for (const entry of entries) {
        const newHeight = (entry.contentRect.height * 100) / window.innerHeight;
        setHeight(newHeight);
      }
    });
    setHeight(
      (absoluteElementRef.current.offsetHeight * 100) / window.innerHeight
    );
    resizeObserver.observe(absoluteElementRef.current);

    return () => {
      resizeObserver.disconnect();
    };
  }, [form, absoluteElementRef.current]);

  return (
    <>
      <Head>
        <title>{form === "login" ? "Login " : "Sign Up"}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex h-auto min-h-screen w-full items-center justify-center align-middle  ">
        <img
          width={512}
          height={512}
          alt={"icon image for the authentication section of Zeraphis"}
          src={"/authenticate/auth-icon.png"}
          className={`absolute bottom-0 left-0 -translate-x-1/4 translate-y-1/4 `}
        />
        <animated.main
          style={sectionStyles}
          className="relative flex h-auto min-h-[50vh] w-1/2 flex-col "
        >
          <div className="flex h-24 w-full">
            <animated.button
              style={loginStyle}
              onClick={() => setForm("login")}
              className="flex flex-grow items-center justify-center  rounded-t-xl align-middle text-lg text-white"
            >
              Login
            </animated.button>

            <animated.button
              style={signUpStyle}
              onClick={() => setForm("sign-up")}
              className="flex flex-grow items-center  justify-center rounded-t-xl align-middle text-lg text-white"
            >
              Sign Up
            </animated.button>
          </div>
          <animated.section
            ref={sectionRef}
            className="relative flex h-auto w-full flex-1 flex-col items-center justify-center overflow-clip  rounded-b-xl  align-middle"
            style={sectionStyles}
          >
            {transitions((style, item) => (
              <animated.div
                ref={absoluteElementRef}
                style={style}
                className="absolute left-0 top-0 z-10 h-auto w-full  rounded-b-xl bg-[#13472D] !bg-opacity-100"
              >
                {item === "login" ? <Login /> : <SignUp />}
              </animated.div>
            ))}
          </animated.section>
        </animated.main>
      </div>
    </>
  );
};
export default AuthenticatePage;
