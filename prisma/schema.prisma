// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

model Language {
    id         String      @id @default(cuid())
    flashcards Flashcard[]
    progress   Int?
    wsProgress Int?
    arUser     User?       @relation("ar", fields: [arId], references: [id])
    arId       String?     @unique
    hbUser     User?       @relation("hb", fields: [hbid], references: [id])
    hbid       String?     @unique
    knUser     User?       @relation("kn", fields: [knId], references: [id])
    knId       String?     @unique

    @@unique([id])
}

enum LangName {
    ar
    ko
    hb
}

enum ProfileVisibility {
    private
    public
}

model Flashcard {
    id             String    @unique @default(uuid())
    front          String
    back           String
    interval       Float     @default(1)
    repetition     Float     @default(0)
    easinessFactor Float     @default(2.5)
    lastReview     DateTime?
    dueTime        DateTime  @default(now())
    language       Language  @relation(fields: [languageId], references: [id])
    languageId     String

    @@index([id])
    @@index([languageId])
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

// Import other schema files
datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                String            @id @default(cuid())
    password          String?
    name              String?
    email             String            @unique
    emailVerified     DateTime?
    image             String?           @db.VarChar(2048)
    accounts          Account[]
    sessions          Session[]
    profileVisibility ProfileVisibility @default(public)
    createdAt         DateTime          @default(now())
    ar                Language?         @relation("ar")
    hb                Language?         @relation("hb")
    kn                Language?         @relation("kn")

    @@index([id, email])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
