// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

model Language {
    id         String      @id @default(cuid())
    flashcards Flashcard[]
    progress   Int?
    arUser     User?       @relation("ar", fields: [arId], references: [id])
    arId       String?     @unique
    hbUser     User?       @relation("hb", fields: [hbid], references: [id])
    hbid       String      @unique
    knUser     User?       @relation("kn", fields: [knId], references: [id])
    knId       String?     @unique

    @@unique([id])
}

enum LangName {
    ar
    ko
    hb
}

enum ProfileVisibility {
    private
    public
}

model Flashcard {
    id         String   @id @default(cuid())
    front      String
    back       String
    dueTime    DateTime
    language   Language @relation(fields: [languageId], references: [id])
    languageId String

    @@index([languageId])
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

// Import other schema files
datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                String            @id @default(cuid())
    password          String?
    name              String?
    email             String            @unique
    emailVerified     DateTime?
    image             String?           @db.VarChar(2048)
    accounts          Account[]
    sessions          Session[]
    profileVisibility ProfileVisibility @default(public)
    createdAt         DateTime          @default(now())
    ar                Language?         @relation("ar")
    hb                Language?         @relation("hb")
    kn                Language?         @relation("kn")

    @@index([id, email])
}

model ArabicText {
    textId  Int               @id @default(autoincrement())
    quran   Quran?
    hadiths HadithCollection?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model QuranVerse {
    id               Int          @id @default(autoincrement())
    chNumber         Int          @default(1)
    verseChNumber    Int          @default(1)
    verseQuranNumber Int          @unique
    arText           String
    enText           String
    transliteration  String
    audioURL         QuranAudio[]
    chapter          QuranChapter @relation(fields: [chNumber], references: [chNumber])

    @@index([chNumber])
}

model QuranAudio {
    id      Int        @id @default(autoincrement())
    url     String
    verse   QuranVerse @relation(fields: [verseId], references: [id])
    verseId Int

    @@index([verseId])
}

model QuranChapter {
    id            Int          @id @default(autoincrement())
    chNumber      Int          @unique
    arChapterName String
    enChapterName String
    verses        QuranVerse[]
    quranId       Int
    quran         Quran        @relation(fields: [quranId], references: [id])

    @@index([quranId])
}

model Quran {
    id         Int            @id @default(autoincrement())
    arabicText ArabicText     @relation(fields: [id], references: [textId])
    chapters   QuranChapter[]

    @@index([id])
}

enum HadithAuthor {
    bukhari
    muslim
    nasai
    abudawud
    tirmidhi
    ibnmajah
}

model Hadith {
    id              Int        @id @default(autoincrement())
    textDifficulty  Int
    enText          String
    arText          String
    reference       String
    inBookReference String
    bookName        String
    authorName      String
    book            HadithBook @relation(fields: [bookName], references: [bookName])

    @@index([bookName])
}

model HadithBook {
    id         Int          @id @default(autoincrement())
    bookName   String       @unique
    arBookName String
    enBookName String
    hadiths    Hadith[]
    author     HadithAuthor
    authorName String

    @@index([id])
    @@map("matches")
}

model HadithCollection {
    textId     Int        @id @default(autoincrement())
    arabicText ArabicText @relation(fields: [textId], references: [textId])

    @@index([textId])
}
